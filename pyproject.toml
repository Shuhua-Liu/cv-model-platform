# ===============================================
# CV Model Platform - Modern Python Project Configuration
# ===============================================

[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

# ===============================================
# üì¶ Project Metadata
# ===============================================
[project]
name = "cv-model-platform"
description = "A unified platform for computer vision model management and deployment"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Shuhua Liu", email = "shuhua.liu0709@gmail.com"},
]
maintainers = [
    {name = "Shuhua Liu", email = "shuhua.liu0709@gmail.com"},
]
keywords = [
    "computer-vision",
    "deep-learning", 
    "machine-learning",
    "pytorch",
    "yolo",
    "sam", 
    "stable-diffusion",
    "detectron2",
    "cv",
    "ai",
    "image-processing",
    "object-detection",
    "segmentation",
    "classification",
    "image-generation",
    "model-serving",
    "api",
    "platform"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
]
requires-python = ">=3.8"
dynamic = ["version"]

# ===============================================
# üîó Dependencies
# ===============================================
dependencies = [
    "torch>=1.13.0",
    "torchvision>=0.14.0", 
    "numpy>=1.21.0",
    "opencv-python>=4.6.0",
    "pillow>=9.0.0",
    "pyyaml>=6.0",
    "pydantic>=1.10.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.20.0",
    "httpx>=0.24.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "rich>=13.0.0",
    "typer>=0.7.0",
    "loguru>=0.7.0",
    "psutil>=5.9.0",
    "tqdm>=4.64.0",
    "packaging>=21.0",
]

# ===============================================
# üéØ Optional Dependencies
# ===============================================
[project.optional-dependencies]
# Detection models
detection = [
    "ultralytics>=8.0.0",
    "yolov5>=7.0.0",
]

# Segmentation models  
segmentation = [
    "segment-anything>=1.0",
]

# Generation models
generation = [
    "diffusers>=0.21.0",
    "transformers>=4.25.0",
    "accelerate>=0.20.0",
    "xformers>=0.0.20",
]

# Classification models
classification = [
    "timm>=0.9.0",
    "torchmetrics>=0.11.0",
]

# Multimodal models
multimodal = [
    "open-clip-torch>=2.20.0",
    "transformers>=4.25.0",
]

# Backend support
onnx = [
    "onnx>=1.14.0",
    "onnxruntime>=1.15.0",
    "onnxruntime-gpu>=1.15.0",
]

tensorrt = [
    "tensorrt>=8.6.0",
    "pycuda>=2022.2",
]

openvino = [
    "openvino>=2023.0.0",
]

# Web interfaces
web = [
    "streamlit>=1.25.0",
    "gradio>=3.40.0",
    "plotly>=5.15.0",
    "bokeh>=3.2.0",
]

# Development tools
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-jupyter>=0.24.0",
]

# All model types
all = [
    "cv-model-platform[detection,segmentation,generation,classification,multimodal]",
]

# Full installation with all extras
full = [
    "cv-model-platform[all,onnx,tensorrt,web,dev,docs]",
]

# ===============================================
# üöÄ Project URLs
# ===============================================
[project.urls]
Homepage = "https://github.com/yourusername/cv-model-platform"
Documentation = "https://cv-model-platform.readthedocs.io/"
Repository = "https://github.com/yourusername/cv-model-platform.git"
"Issue Tracker" = "https://github.com/yourusername/cv-model-platform/issues"
Changelog = "https://github.com/yourusername/cv-model-platform/blob/main/CHANGELOG.md"
"Release Notes" = "https://github.com/yourusername/cv-model-platform/releases"

# ===============================================
# üéØ Console Scripts
# ===============================================
[project.scripts]
cv-platform = "cv_platform.cli.main:app"
cv-detect-models = "cv_platform.scripts.detect_models:main"
cv-setup = "cv_platform.scripts.setup_environment:main" 
cv-server = "cv_platform.api.rest_api:main"
cv-benchmark = "cv_platform.scripts.benchmark:main"

# ===============================================
# üìÅ Package Discovery
# ===============================================
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
cv_platform = [
    "config/*.yaml",
    "config/examples/*.yaml",
    "config/schemas/*.json", 
    "web/static/*",
    "web/templates/*",
    "py.typed",
]

# ===============================================
# üìä Version Management
# ===============================================
[tool.setuptools_scm]
write_to = "src/cv_platform/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# ===============================================
# üßπ Code Formatting - Black
# ===============================================
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# ===============================================
# üìù Import Sorting - isort
# ===============================================
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests", "scripts"]

# ===============================================
# üîç Type Checking - mypy  
# ===============================================
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "torch.*",
    "torchvision.*", 
    "PIL.*",
    "numpy.*",
    "ultralytics.*",
    "detectron2.*",
    "transformers.*",
    "diffusers.*",
    "segment_anything.*",
]
ignore_missing_imports = true

# ===============================================
# üß™ Testing - pytest
# ===============================================
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=cv_platform",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:reports/coverage",
    "--cov-report=xml:reports/coverage.xml",
    "--junitxml=reports/pytest.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "gpu: Tests requiring GPU",
    "model: Tests requiring model files",
    "web: Web interface tests",
    "api: API tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ===============================================
# üìä Coverage - pytest-cov
# ===============================================
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "src/cv_platform/__init__.py",
    "src/cv_platform/_version.py", 
    "tests/*",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "reports/coverage"

# ===============================================
# üõ°Ô∏è Security - bandit
# ===============================================
[tool.bandit]
exclude_dirs = ["tests", "scripts/setup"]
skips = ["B101", "B601"]

# ===============================================
# üîß Flake8 Configuration
# ===============================================
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",
]

# ===============================================
# üéØ Pre-commit Hooks
# ===============================================
[tool.pre-commit] 
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-